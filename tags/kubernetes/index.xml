<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on GUI Free Life</title><link>http://guifreelife.com/tags/kubernetes/</link><description>Recent content in Kubernetes on GUI Free Life</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 06 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://guifreelife.com/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Securing Cloud-init User Data with External Secrets and OpenShift Virtualization</title><link>http://guifreelife.com/blog/2025/10/06/Securing-Cloud-init-User-Data-with-External-Secrets-and-OpenShift-Virtualization/</link><pubDate>Mon, 06 Oct 2025 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2025/10/06/Securing-Cloud-init-User-Data-with-External-Secrets-and-OpenShift-Virtualization/</guid><description>&lt;p>Storing Kubernetes resources in git for automated deployment promotes consistency, resilency, and accountability, but commiting secrets to git is risky and should be avoided. Use the External Secrets Operator to securely store cloud-init and other data, and sleep soundly!&lt;/p></description></item><item><title>OpenShift CoreOS On-Cluster Custom Node Image Layering</title><link>http://guifreelife.com/blog/2025/06/20/CoreOS-Image-Layering-Autofs/</link><pubDate>Fri, 20 Jun 2025 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2025/06/20/CoreOS-Image-Layering-Autofs/</guid><description>&lt;p>CoreOS On-cluster Image Layering in OpenShift 4.19 allows modifications to node the operating system. This detailed walk through customizes the node operating system image by adding RPMs to support autofs.&lt;/p>
&lt;p>In &lt;a href="http://guifreelife.com/coming-soon/" title="Configuring AutoFS on OpenShift">part 2&lt;/a> we will configure autofs and enable automatic filesystem mounting across cluster nodes.&lt;/p></description></item><item><title>Managing Readable OpenShift MachineConfigs with Butane</title><link>http://guifreelife.com/blog/2025/05/29/Managing-OpenShift-Machine-Configuration-with-Butane-and-Ignition/</link><pubDate>Thu, 29 May 2025 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2025/05/29/Managing-OpenShift-Machine-Configuration-with-Butane-and-Ignition/</guid><description>&lt;p>The OpenShift Machine Configuration Operator applies configuration changes to to nodes using a syntax called &lt;a href="https://coreos.github.io/ignition/specs/" title="CoreOS Ignition Spec">Ignition&lt;/a>,
but managing base64 encoded text can be challenging. What if I told you that you can use plain text and normal files?&lt;/p></description></item><item><title>Generate a Kubeconfig to Enable OpenShift Service Account Authentication</title><link>http://guifreelife.com/blog/2025/04/09/Kubeconfig-for-OpenShift-Service-Accounts/</link><pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2025/04/09/Kubeconfig-for-OpenShift-Service-Accounts/</guid><description>&lt;p>This post demonstrates how to properly generate kubeconfig files for OpenShift ServiceAccounts, enabling secure token-based authentication and TLS connections. You will learn how to create ServiceAccounts, generate time-limited tokens, bundle CA certificates, and package everything into a distributable kubeconfig file that can be stored as a Secret for download.&lt;/p></description></item><item><title>OpenShift Virtual Guest Tagging</title><link>http://guifreelife.com/blog/2025/01/02/OpenShift-Virtualization-VLAN-Guest-Tagging/</link><pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2025/01/02/OpenShift-Virtualization-VLAN-Guest-Tagging/</guid><description>&lt;p>Some workloads require the use of VLAN interfaces in virtual machines. VMware terms this feature &amp;ldquo;Virtual Guest Tagging&amp;rdquo; or &amp;ldquo;VLAN Guest Tagging&amp;rdquo; while OpenStack calls it &amp;ldquo;VLAN-aware instances&amp;rdquo;. See how OpenShift Virtualization can pass 802.1q trunks to VMs using a traditional Linux Bridge interface.&lt;/p></description></item><item><title>Open Virtual Networking Inspection with OpenShift</title><link>http://guifreelife.com/blog/2024/11/19/Open-Virtual-Network-Inspection-on-OpenShift/</link><pubDate>Tue, 19 Nov 2024 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2024/11/19/Open-Virtual-Network-Inspection-on-OpenShift/</guid><description>&lt;p>Accessing the details of the software defined networking features of OpenShift can be helpful for deeper troubleshooting or enhanced understanding. You&amp;rsquo;ll not find a full explanation of &lt;a href="https://www.ovn.org/en/" title="OpenVirtualNetwork">Open Virtual Network&lt;/a> or &lt;a href="https://ovn-kubernetes.io/" title="OVN-Kubernetes">OVN-Kubernetes&lt;/a> here, but you will learn how to quickly peer inside and investigate their inner workings.&lt;/p></description></item><item><title>Using Placements to Apply Open Cluster Management Policies to Kubernetes Clusters</title><link>http://guifreelife.com/blog/2024/03/11/Placing-Open-Cluster-Management-Policies-on-Kubernetes/</link><pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2024/03/11/Placing-Open-Cluster-Management-Policies-on-Kubernetes/</guid><description>&lt;p>&lt;a href="https://access.redhat.com/products/red-hat-advanced-cluster-management-for-kubernetes/" title="RHACM">Red Hat Advanced Cluster Management&lt;/a> (RHACM) enables Open Cluster Management policy driven governance of an entire fleet of Kubernetes clusters. Associating policies with the appropriate clusters is a very flexible operation and requires understanding resources like Placements and ManagedClusterSetBindings. So let&amp;rsquo;s get familiar!&lt;/p></description></item><item><title>Accessing the Ceph CLI with OpenShift Data Foundation</title><link>http://guifreelife.com/blog/2023/04/06/Accessing-Ceph-CLI-with-OpenShift-Data-Foundation/</link><pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2023/04/06/Accessing-Ceph-CLI-with-OpenShift-Data-Foundation/</guid><description>&lt;p>The Ceph Toolbox is not recommended or supported for use with OpenShift Data Foundation, but sometimes you want a client to troubleshoot with anyway.&lt;/p></description></item><item><title>Extracting TLS CA Certificates from Kubeconfig File</title><link>http://guifreelife.com/blog/2023/03/09/Extracting-CA-Certs-From-Kubeconfig/</link><pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2023/03/09/Extracting-CA-Certs-From-Kubeconfig/</guid><description>&lt;p>OpenShift creates a number of Certificate Authorities to sign TLS certificates which secure functions including load balancing of the API and Ingress services.
Recent versions of openshift-install will place all the CA certificates in the generated &lt;code>auth/kubeconfig&lt;/code> file.&lt;/p>
&lt;p>Here is how to extract and split those certificates into individual files which eases the process of trusting them particularly on a Mac.&lt;/p></description></item><item><title>Autoscaling OpenShift Workloads With Custom Prometheus Metrics</title><link>http://guifreelife.com/blog/2022/11/03/Autoscaling-OpenShift-Workloads-with-Custom-Prometheus-Metrics/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2022/11/03/Autoscaling-OpenShift-Workloads-with-Custom-Prometheus-Metrics/</guid><description>&lt;p>Kubernetes enables the automated scaling of applications to meet workload demands. Historically only memory and CPU consumption could be considered in scaling decisions, but the OpenShift Custom Metrics Autoscaler operator and KEDA remove that limitation. Read on to learn how OpenShift enables auto scaling based on the metrics that are important to your business.&lt;/p></description></item><item><title>Installing OpenShift on Azure for Windows Containers</title><link>http://guifreelife.com/blog/2021/05/18/OpenShift-Windows-Containers-part-1/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2021/05/18/OpenShift-Windows-Containers-part-1/</guid><description>&lt;p>Adding support for Windows nodes in your OpenShift cluster is a day 2 operation that requires preparation at install time.
It is important to accommodate the hybrid networking requirements for Windows Kubernetes nodes.
Azure specific tasks and gotchas are highlighted in this part 1 of 3 while laying the groundwork applicable to deploying OpenShift on any provider in preparation for managing Windows containers.&lt;/p></description></item><item><title>Load balancing of OpenShift HA Routers Mind the GARP</title><link>http://guifreelife.com/blog/2018/02/16/OpenShift-Router-LoadBalancing/</link><pubDate>Fri, 16 Feb 2018 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2018/02/16/OpenShift-Router-LoadBalancing/</guid><description>&lt;p>&lt;a href="http://guifreelife.com/blog/2016/03/01/OpenShift-3-HA-Routing">OpenShift HA Routing&lt;/a> uses &lt;a href="https://docs.openshift.com/container-platform/latest/architecture/networking/haproxy-router.html">haproxy application routers&lt;/a> to get traffic into the cluster. These application routers are made redundant by running &lt;a href="https://docs.openshift.com/container-platform/latest/admin_guide/high_availability.html">ipfailover (keepalived)&lt;/a> pods to maintain a set of Virtual IPs on each infrastructure node where the application routers run. These VIPs are then referenced by round robin DNS records to enable a measure of load balancing.&lt;/p>
&lt;p>OK, so now you are load balancing at the network layer, but what about the link layer?
Did you know that even &lt;em>if&lt;/em> you somehow manage to perfectly balance traffic among the VIPs using RR DNS you could still be using only one of your application routers? Well you could be!&lt;/p></description></item><item><title>Installing OpenShift on OpenStack</title><link>http://guifreelife.com/blog/2017/08/20/OpenShift-on-OpenStack/</link><pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2017/08/20/OpenShift-on-OpenStack/</guid><description>&lt;p>&lt;strong>This is a work in progress&lt;/strong>&lt;/p>
&lt;p>The OpenShift Container Platform (OCP) can run on many types of infrastructure; from a Docker contrainer, to a single VM, to a fleet of baremetal or VMs on an infrastructure provider such as RHV, VMware, Amazon EC2, Google Compute Engine, or OpenStack Platform (OSP). This post is to document my experimentation with setting up OCP on OSP.&lt;/p>
&lt;h1 id="doc-overview">Doc Overview&lt;/h1>
&lt;p>So where are the docs?&lt;/p></description></item><item><title>Configuring OpenShift with Multiple Sharded Routers</title><link>http://guifreelife.com/blog/2017/01/29/OpenShift-Multiple-Sharded-Routers/</link><pubDate>Sun, 29 Jan 2017 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2017/01/29/OpenShift-Multiple-Sharded-Routers/</guid><description>&lt;p>I needed to host a service that would be consumed by a &lt;a href="http://www.teradici.com/">closed client&lt;/a> that insists on speaking HTTPS on port 50,000. To solve this, I added a 2nd router deployment and used the OpenShift router sharding feature to selectively enable routes on the 2nd router by way of selectors.&lt;/p>
&lt;p>To summarize:&lt;/p>
&lt;p>&lt;em>&lt;a href="http://guifreelife.com/blog/2016/03/01/OpenShift-3-HA-Routing">Existing HA router&lt;/a>:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>HTTP 80&lt;/li>
&lt;li>HTTPS 443&lt;/li>
&lt;li>Haproxy Stats 1,936&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Added HA router:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>HTTP 49,999&lt;/li>
&lt;li>HTTPS 50,000&lt;/li>
&lt;li>Haproxy Stats 51,936&lt;/li>
&lt;/ul>
&lt;h1 id="how-to">How To&lt;/h1>
&lt;h2 id="open-infra-node-firewalls">Open infra node firewalls&lt;/h2>
&lt;ul>
&lt;li>Open firewall on infra nodes where router will run to allow new http and https port&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> iptables -A OS_FIREWALL_ALLOW -m tcp -p tcp --dport &lt;span style="color:#b452cd">49999&lt;/span> -j ACCEPT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iptables -A OS_FIREWALL_ALLOW -m tcp -p tcp --dport &lt;span style="color:#b452cd">50000&lt;/span> -j ACCEPT
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>This can also be done with Ansible and the &lt;a href="https://github.com/openshift/openshift-ansible/tree/master/roles/os_firewall">os_firewall role&lt;/a> in your playbook. (&lt;em>untested&lt;/em>)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#8b008b;font-weight:bold">hosts&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>infra-nodes&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">vars&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">os_firewall_use_firewalld&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">False&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">os_firewall_allow&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">service&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>teradici-http&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">49999&lt;/span>/tcp&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">service&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>teradici-https&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">50000&lt;/span>/tcp&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">roles&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- os_firewall&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-a-router">Create a router&lt;/h2>
&lt;ul>
&lt;li>Create a router called &lt;em>ha-router-teradici&lt;/em> with &lt;code>oa adm router&lt;/code> or &lt;code>oadm router&lt;/code> on these ports and also make sure the stats port does not clash with existing router on port 1936&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>[root@ose-test-master-01 ~]&lt;span style="color:#228b22"># oc get nodes --show-labels&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME STATUS AGE LABELS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ose-test-master-01.example.com Ready 180d kubernetes.io/hostname=ose-test-master-01.example.com,region=master,zone=rhev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ose-test-master-02.example.com Ready 180d kubernetes.io/hostname=ose-test-master-02.example.com,region=master,zone=rhev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ose-test-node-01.example.com Ready 180d ha-router=primary,kubernetes.io/hostname=ose-test-node-01.example.com,region=infra,zone=rhev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ose-test-node-02.example.com Ready 180d ha-router=primary,kubernetes.io/hostname=ose-test-node-02.example.com,region=infra,zone=rhev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ose-test-node-03.example.com Ready 180d kubernetes.io/hostname=ose-test-node-03.example.com,region=primary,zone=rhev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ose-test-node-04.example.com Ready 180d kubernetes.io/hostname=ose-test-node-04.example.com,region=primary,zone=rhev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[root@ose-test-master-01 ~]&lt;span style="color:#228b22"># oadm router ha-router-teradici \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --ports=&lt;span style="color:#cd5555">&amp;#39;49999:49999,50000:50000&amp;#39;&lt;/span> &lt;span style="color:#cd5555">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555">&lt;/span> --stats-port=&lt;span style="color:#b452cd">51936&lt;/span> &lt;span style="color:#cd5555">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555">&lt;/span> --replicas=&lt;span style="color:#b452cd">2&lt;/span> &lt;span style="color:#cd5555">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555">&lt;/span> --selector=&lt;span style="color:#cd5555">&amp;#34;ha-router=primary&amp;#34;&lt;/span> &lt;span style="color:#cd5555">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555">&lt;/span> --selector=&lt;span style="color:#cd5555">&amp;#34;region=infra&amp;#34;&lt;/span> &lt;span style="color:#cd5555">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555">&lt;/span> --labels=&lt;span style="color:#cd5555">&amp;#34;ha-router=teradici&amp;#34;&lt;/span> &lt;span style="color:#cd5555">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555">&lt;/span> --default-cert=201602_router_wildcard.os.example.com.pem &lt;span style="color:#cd5555">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555">&lt;/span> --service-account=router
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>GOOD&lt;/em>: I see that the ports are set properly in the haproxy.config and the service objects&lt;/p></description></item><item><title>OpenShift Cluster Metrics and Cassandra Troubleshooting</title><link>http://guifreelife.com/blog/2016/11/14/OpenShift-Cluster-Metrics-and-Cassandra-Troubleshooting/</link><pubDate>Mon, 14 Nov 2016 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2016/11/14/OpenShift-Cluster-Metrics-and-Cassandra-Troubleshooting/</guid><description>&lt;p>OpenShift gathers &lt;a href="https://docs.openshift.com/container-platform/3.3/install_config/cluster_metrics.html">cluster metrics&lt;/a> such as CPU, memory, and network bandwidth per pod which can assist in troubleshooting and capacity planning. The metrics are also used to support &lt;a href="https://docs.openshift.com/container-platform/3.3/dev_guide/pod_autoscaling.html">horizontal pod autoscaling&lt;/a>, which makes the metrics service not just helpful, but critical to operation.&lt;/p>
&lt;h2 id="missing-liveness-probes">Missing Liveness Probes&lt;/h2>
&lt;p>There are 3 major components in the metrics collection process. &lt;a href="https://github.com/kubernetes/heapster">Heapster&lt;/a> gathers stats from Docker and feeds them to &lt;a href="https://github.com/hawkular/hawkular-metrics">Hawkular Metrics&lt;/a> to tuck away for safe keeping in &lt;a href="http://cassandra.apache.org/">Cassandra&lt;/a>.&lt;/p></description></item><item><title>Deploy Hawkular Metrics in CDK 2.1 OpenShift 3.2</title><link>http://guifreelife.com/blog/2016/06/16/Deploy-Hawkular-Metrics-in-CDK-2.0-OpenShift-3.1/</link><pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2016/06/16/Deploy-Hawkular-Metrics-in-CDK-2.0-OpenShift-3.1/</guid><description>&lt;p>&lt;strong>Update!&lt;/strong> &lt;em>I failed with CDK 2.0, but CDK 2.1 works with some fiddling.&lt;/em>&lt;/p>
&lt;p>In my &lt;a href="http://guifreelife.com/blog/2016/06/16/Getting-Started-With-RedHat-Container-Development-Kit">last post&lt;/a> I installed Red Hat Container Developer Kit to deploy OpenShift Enterprise using Vagrant. But now I want to add Hawkular Metrics to that deployment.&lt;/p>
&lt;h1 id="deploy-metrics">Deploy Metrics&lt;/h1>
&lt;p>Refer to &lt;a href="https://docs.openshift.com/enterprise/3.2/install_config/cluster_metrics.html">the docs&lt;/a> for deploying metrics in OSE.&lt;/p>
&lt;p>&lt;a href="http://guifreelife.com/images/openshift-cdk-metrics-0.png">&lt;img src="http://guifreelife.com/images/thumb/openshift-cdk-metrics-0.png" alt="OpenShift Metrics">&lt;/a>&lt;/p>
&lt;p>Login to the vagrant CDK VM before continuing&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#658b00">cd&lt;/span> ~/cdk/components/rhel/rhel-ose/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ vagrant ssh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ oc login
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication required &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> https://127.0.0.1:8443 (openshift)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Username: admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Password: admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Login successful.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ oc project openshift-infra
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ oc get sa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME SECRETS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>build-controller &lt;span style="color:#b452cd">2&lt;/span> 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder &lt;span style="color:#b452cd">2&lt;/span> 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>daemonset-controller &lt;span style="color:#b452cd">2&lt;/span> 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default &lt;span style="color:#b452cd">2&lt;/span> 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>deployer &lt;span style="color:#b452cd">2&lt;/span> 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>deployment-controller &lt;span style="color:#b452cd">2&lt;/span> 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gc-controller &lt;span style="color:#b452cd">2&lt;/span> 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hpa-controller &lt;span style="color:#b452cd">2&lt;/span> 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>job-controller &lt;span style="color:#b452cd">2&lt;/span> 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>namespace-controller &lt;span style="color:#b452cd">2&lt;/span> 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pv-binder-controller &lt;span style="color:#b452cd">2&lt;/span> 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pv-provisioner-controller &lt;span style="color:#b452cd">2&lt;/span> 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pv-recycler-controller &lt;span style="color:#b452cd">2&lt;/span> 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>replication-controller &lt;span style="color:#b452cd">2&lt;/span> 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ oc create -f - &lt;span style="color:#cd5555">&amp;lt;&amp;lt;API
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555">apiVersion: v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555">kind: ServiceAccount
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555"> name: metrics-deployer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555"> secrets:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555"> - name: metrics-deployer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cd5555">API&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ oc secrets new metrics-deployer &lt;span style="color:#00688b">nothing&lt;/span>=/dev/null
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ oadm policy add-role-to-user edit system:serviceaccount:openshift-infra:metrics-deployer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ oadm policy add-cluster-role-to-user cluster-reader system:serviceaccount:openshift-infra:heapster
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From your OSE server grab &lt;code>/usr/share/openshift/examples/infrastructure-templates/enterprise/metrics-deployer.yaml&lt;/code> or from &lt;a href="https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/v1.2/infrastructure-templates/enterprise/metrics-deployer.yaml">here&lt;/a>&lt;/p></description></item><item><title>Getting Started With RedHat Container Development Kit</title><link>http://guifreelife.com/blog/2016/06/16/Getting-Started-With-RedHat-Container-Development-Kit/</link><pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2016/06/16/Getting-Started-With-RedHat-Container-Development-Kit/</guid><description>&lt;p>The RedHat Container Developer Kit allows you to deploy OpenShift on your laptop for easier testing and development. Here is how to deploy it.&lt;/p>
&lt;p>&lt;a href="http://guifreelife.com/images/openshift-cdk-2.1.png">&lt;img src="http://guifreelife.com/images/thumb/openshift-cdk-2.1.png" alt="OpenShift CDK">&lt;/a>&lt;/p>
&lt;h1 id="register-as-a-redhat-developer">Register as a RedHat Developer&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://developers.redhat.com/">Obtain a RH login&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Place credentials in &lt;code>~/.vagrant.d/Vagrantfile&lt;/code> to enable updates for VMs by automatically registering with RedHat Subscription Manager&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00688b">Vagrant&lt;/span>.configure(&lt;span style="color:#cd5555">&amp;#39;2&amp;#39;&lt;/span>) &lt;span style="color:#8b008b;font-weight:bold">do&lt;/span> |config|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config.registration.username = &lt;span style="color:#cd5555">&amp;#39;&amp;lt;your Red Hat username&amp;gt;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config.registration.password = &lt;span style="color:#cd5555">&amp;#39;&amp;lt;your Red Hat password&amp;gt;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="mac-os-x-prereqs">Mac OS X Prereqs&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>Install pre-reqs:&lt;/p></description></item><item><title>Upgrading OpenShift Enterprise from 3.1 to 3.2</title><link>http://guifreelife.com/blog/2016/05/17/OpenShift-Enterprise-Upgrade-3.1-to-3.2/</link><pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2016/05/17/OpenShift-Enterprise-Upgrade-3.1-to-3.2/</guid><description>&lt;p>Upgrading from OSE 3.1 to 3.2 using the &lt;a href="https://github.com/openshift/openshift-ansible/blob/master/playbooks/common/openshift-cluster/upgrades/v3_1_to_v3_2/upgrade.yml">playbook&lt;/a> went quite well for me, but there were a few issues to sort out.&lt;/p>
&lt;p>The issues were related to:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#ip-failover">ip failover&lt;/a> had to be updated manually&lt;/li>
&lt;li>there was about 5 minutes &lt;a href="#downtime-during-upgrade">downtime during the upgrade&lt;/a>&lt;/li>
&lt;li>&lt;a href="#image-stream-updates">updates to image streams&lt;/a>&lt;/li>
&lt;li>&lt;a href="#docker-errors">docker error messages&lt;/a>&lt;/li>
&lt;li>&lt;a href="#update-cluster-policies-and-roles">updated policy and role bindings&lt;/a> &lt;em>build strategy Source is not allowed&lt;/em>&lt;/li>
&lt;li>&lt;a href="#hawkular-metrics">hawkular metrics&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="upgrade-process">Upgrade Process&lt;/h1>
&lt;p>Following the directions is pretty straight forward.&lt;/p></description></item><item><title>Changing the SSL Certificate for OpenShift Console</title><link>http://guifreelife.com/blog/2016/03/24/Replace-OpenShift-Console-SSL-Certificate/</link><pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2016/03/24/Replace-OpenShift-Console-SSL-Certificate/</guid><description>&lt;p>OpenShift has an internal CA for generating certificates to authenticate intra-cluster communication, but your browser doesn&amp;rsquo;t trust this CA. Perhaps you want to fix that without mucking with the internal SSL communication? I did. Here is how.&lt;/p>
&lt;p>This &lt;a href="https://docs.openshift.org/latest/install_config/certificate_customization.html">OpenShift doc&lt;/a> &lt;em>explains&lt;/em> how to do this, but it isn&amp;rsquo;t very clear, to me at least.&lt;/p>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;p>An outline of the steps:&lt;/p>
&lt;ul>
&lt;li>Only make changes to the public URLs and not any internal URLs.&lt;/li>
&lt;li>Create a &lt;code>namedCertificates&lt;/code> section in both &lt;code>/servingInfo&lt;/code> and &lt;code>/assetConfig/servingInfo&lt;/code> sections of &lt;code>/etc/origin/master/master-config.yaml&lt;/code>.&lt;/li>
&lt;li>In those repeated sections:
&lt;ul>
&lt;li>identify a certificate and key&lt;/li>
&lt;li>identify the hostname(s) to match with that cert/key pair&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Your installation may include the following hosts:&lt;/p></description></item><item><title>OpenShift High Availability - Routing</title><link>http://guifreelife.com/blog/2016/03/01/OpenShift-3-HA-Routing/</link><pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate><guid>http://guifreelife.com/blog/2016/03/01/OpenShift-3-HA-Routing/</guid><description>&lt;p>Highly availabile containers in OpenShift are baked into the cake thanks to &lt;a href="https://docs.openshift.com/enterprise/3.1/architecture/core_concepts/deployments.html#replication-controllers">replication controllers&lt;/a> and &lt;a href="https://docs.openshift.com/enterprise/3.1/architecture/core_concepts/pods_and_services.html#services">service load balancing&lt;/a>, but there are plenty of other single points of failure. Here is how to eliminate many of those.&lt;/p>
&lt;h1 id="single-points-of-failure">Single Points of Failure&lt;/h1>
&lt;p>The &lt;a href="https://docs.openshift.com/dedicated/3.1/architecture/infrastructure_components/kubernetes_infrastructure.html">components&lt;/a> of OpenShift include:&lt;/p>
&lt;ul>
&lt;li>Master controller manager server and API endpoint&lt;/li>
&lt;li>Etcd configuration and state storage&lt;/li>
&lt;li>Docker Registry&lt;/li>
&lt;li>Router haproxy&lt;/li>
&lt;/ul>
&lt;p>This post is mostly about adding high availability to the routing layer.&lt;/p></description></item></channel></rss>